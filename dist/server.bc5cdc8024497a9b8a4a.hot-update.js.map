{"version":3,"sources":["webpack:///./server/uiserver.js"],"names":["app","express","SourceMapSupport","install","dotenv","config","enableHMR","process","env","ENABLE_HMR","console","log","webpack","require","devMiddleware","hotMiddleware","entry","push","plugins","HotModuleReplacementPlugin","compiler","use","static","apiProxyTarget","API_PROXY_TARGET","proxy","target","UI_API_ENDPOINT","get","req","res","send","JSON","stringify","render","next","sendFile","path","resolve","port","UI_SERVER_PORT","listen","module","hot","accept"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACJ;AACM;AACY;AACQ;AAEhB;AAElC,MAAMA,GAAG,GAAGC,8CAAO,CAAC,CAAC;AAErBC,yDAAgB,CAACC,OAAO,CAAC,CAAC;AAC1BC,6CAAM,CAACC,MAAM,CAAC,CAAC;AAEf,MAAMC,SAAS,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,UAAU,IAAI,MAAM,MAAM,MAAM;AAE/D,IAAIH,SAAS,IAAKC,aAAoB,KAAK,YAAa,EAAE;EACxDG,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;EACjD;EACA;EACA,MAAMC,OAAO,GAAGC,mBAAO,CAAC,wBAAS,CAAC;EAClC,MAAMC,aAAa,GAAGD,mBAAO,CAAC,sDAAwB,CAAC;EACvD,MAAME,aAAa,GAAGF,mBAAO,CAAC,sDAAwB,CAAC;EAEvD,MAAMR,MAAM,GAAGQ,mBAAO,CAAC,iDAAsB,CAAC,CAAC,CAAC,CAAC;EACjDR,MAAM,CAACW,KAAK,CAAChB,GAAG,CAACiB,IAAI,CAAC,+BAA+B,CAAC;EACtDZ,MAAM,CAACa,OAAO,GAAGb,MAAM,CAACa,OAAO,IAAI,EAAE;EACrCb,MAAM,CAACa,OAAO,CAACD,IAAI,CAAC,IAAIL,OAAO,CAACO,0BAA0B,CAAC,CAAC,CAAC;EAE7D,MAAMC,QAAQ,GAAGR,OAAO,CAACP,MAAM,CAAC;EAChCL,GAAG,CAACqB,GAAG,CAACP,aAAa,CAACM,QAAQ,CAAC,CAAC;EAChCpB,GAAG,CAACqB,GAAG,CAACN,aAAa,CAACK,QAAQ,CAAC,CAAC;AAClC;AAEApB,GAAG,CAACqB,GAAG,CAACpB,8CAAO,CAACqB,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEjC,MAAMC,cAAc,GAAGhB,OAAO,CAACC,GAAG,CAACgB,gBAAgB;AACnD,IAAID,cAAc,EAAE;EAClBvB,GAAG,CAACqB,GAAG,CAAC,UAAU,EAAEI,4DAAK,CAAC;IAAEC,MAAM,EAAEH;EAAe,CAAC,CAAC,CAAC;AACxD;AAEA,MAAMI,eAAe,GAAGpB,OAAO,CAACC,GAAG,CAACmB,eAAe,IAC9C,+BAA+B;AACpC,MAAMnB,GAAG,GAAG;EAAEmB;AAAgB,CAAC;AAE/B3B,GAAG,CAAC4B,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/BA,GAAG,CAACC,IAAI,CAAE,gBAAeC,IAAI,CAACC,SAAS,CAACzB,GAAG,CAAE,EAAC,CAAC;AACjD,CAAC,CAAC;AAEFR,GAAG,CAAC4B,GAAG,CAAC,QAAQ,EAAE,CAACC,GAAG,EAACC,GAAG,KAAK;EAC7BI,2DAAM,CAACL,GAAG,EAAEC,GAAG,EAAEK,IAAI,CAAC;AACxB,CAAC,CAAC;AAEFnC,GAAG,CAAC4B,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACM,QAAQ,CAACC,2CAAI,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGhC,OAAO,CAACC,GAAG,CAACgC,cAAc,IAAI,IAAI;AAE/CxC,GAAG,CAACyC,MAAM,CAACF,IAAI,EAAE,MAAM;EACrB7B,OAAO,CAACC,GAAG,CAAE,sBAAqB4B,IAAK,EAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,IAAGG,IAAU,EAAE;EACbA,MAAM,CAACC,GAAG,CAACC,MAAM,CAAC,yCAAc;AAAA,GAAC;AACnC,C","file":"server.bc5cdc8024497a9b8a4a.hot-update.js","sourcesContent":["import dotenv from 'dotenv';\nimport path from 'path';\nimport express from 'express';\nimport proxy from 'http-proxy-middleware';\nimport SourceMapSupport from 'source-map-support';\n\nimport render from './render.jsx';\n\nconst app = express();\n\nSourceMapSupport.install();\ndotenv.config();\n\nconst enableHMR = (process.env.ENABLE_HMR || 'true') === 'true';\n\nif (enableHMR && (process.env.NODE_ENV !== 'production')) {\n  console.log('Adding dev middlware, enabling HMR');\n  /* eslint \"global-require\": \"off\" */\n  /* eslint \"import/no-extraneous-dependencies\": \"off\" */\n  const webpack = require('webpack');\n  const devMiddleware = require('webpack-dev-middleware');\n  const hotMiddleware = require('webpack-hot-middleware');\n\n  const config = require('../webpack.config.js')[0];\n  config.entry.app.push('webpack-hot-middleware/client');\n  config.plugins = config.plugins || [];\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n  const compiler = webpack(config);\n  app.use(devMiddleware(compiler));\n  app.use(hotMiddleware(compiler));\n}\n\napp.use(express.static('public'));\n\nconst apiProxyTarget = process.env.API_PROXY_TARGET;\nif (apiProxyTarget) {\n  app.use('/graphql', proxy({ target: apiProxyTarget }));\n}\n\nconst UI_API_ENDPOINT = process.env.UI_API_ENDPOINT\n  || 'http://localhost:3000/graphql';\nconst env = { UI_API_ENDPOINT };\n\napp.get('/env.js', (req, res) => {\n  res.send(`window.ENV = ${JSON.stringify(env)}`);\n});\n\napp.get('/about', (req,res) => {\n  render(req, res, next);\n});\n\napp.get('*', (req, res) => {\n  res.sendFile(path.resolve('public/index.html'));\n});\n\nconst port = process.env.UI_SERVER_PORT || 8000;\n\napp.listen(port, () => {\n  console.log(`UI started on port ${port}`);\n});\n\nif(module.hot) {\n  module.hot.accept('./render.jsx')\n}"],"sourceRoot":""}